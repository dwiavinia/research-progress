- GTFS Practice
# GTFS Data Cleaning & Validation Workflow  
_A practice pipeline for transport simulation and analysis_

## Objective
This mini project demonstrates a **complete workflow to clean, validate, and prepare a GTFS feed** before using it for transport analysis or agent-based simulation (e.g., with MATSim).  
It uses a dummy GTFS dataset as a practice dataset to simulate the process of handling real-world public transport data.

## Project Structure
GTFS Practice/
│
├── sample-feed-1.zip # Dummy GTFS feed (downloaded)
├── practice_1.py # Python cleaning script
├── gtfs_extracted/ # Temporary folder (unzipped GTFS)
├── gtfs_cleaned/ # Cleaned version after basic formatting
├── gtfs_cleaned_v2/ # Final validated feed (no errors ✅)
├── gtfs-validator-7.1.0-cli.jar # MobilityData GTFS Validator
└── validation_report_v2/ # Validator output (HTML, JSON)

## Step-by-Step Process

### 1️⃣ Environment Setup
Tools used:
- **VS Code** (for Python + terminal)
- **Python 3.12+** (for data preprocessing)
- **Java OpenJDK 24.0.2** (for GTFS Validator)
- **MobilityData GTFS Validator CLI (v7.1.0)**
Libraries:
```bash
pip install pandas

### 2️⃣ Load and Inspect Dummy GTFS Feed
- Downloaded a dummy feed (sample-feed-1.zip)
- Extracted .txt tables:
  stops.txt, routes.txt, trips.txt, stop_times.txt, calendar.txt
- Checked each file to ensure consistent CSV format and standard headers

### 3️⃣ Build Cleaning Script (practice_1.py)
Python script created to:
- Read all GTFS tables
- Handle missing / inconsistent columns
- Automatically extract and reformat files into a clean folder (gtfs_cleaned/)
- Prepare for validation

### 4️⃣ Validate with MobilityData GTFS Validator
Command used: & "C:\Users\ip 1\.jdks\openjdk-24.0.2\bin\java.exe" -jar gtfs-validator-7.1.0-cli.jar -i gtfs_cleaned -o validation_report
First validation result:
15 notices reported (11 errors, 3 warnings, 1 info)
missing_required_file: agency.txt not found
invalid_integer: 10 occurrences
expired_calendar, missing_recommended_file

### 5️⃣ Fix Required File: agency.txt
Created a minimal valid agency.txt (inside gtfs_cleaned/)

### 6️⃣ Automate Integer Cleaning (gtfs_cleaned_v2)
Developed an extended cleaning script to detect and fix invalid integer fields:
Fixed stop_sequence order per trip_id
Normalized route_type (default → 3 = bus)
Repaired direction_id (force to 0/1)
Re-exported to gtfs_cleaned_v2/
Command to run: python practice_1.py

### 7️⃣ Re-Validate Cleaned Feed
Command: & "C:\Users\ip 1\.jdks\openjdk-24.0.2\bin\java.exe" -jar gtfs-validator-7.1.0-cli.jar -i gtfs_cleaned_v2 -o validation_report_v2

### Final Validation Report
5 notices reported (0 errors, 4 warnings, 1 info)
expired_calendar
missing_recommended_file
trip_coverage_not_active_for_next7_days
unknown_column

## Outcome
Clean and validated GTFS dataset (gtfs_cleaned_v2/)
Reusable Python cleaning pipeline (practice_1.py)
Full understanding of GTFS structure and validation workflow
Ready-to-use feed for:
MATSim conversion (GTFS → transitSchedule.xml)
Transport service analysis (headway, coverage, etc.)
